<template>
  <div class="modal-overlay" @click="handleBackdropClick">
    <div class="modal-content" @click.stop>
      <button class="modal-close" @click="$emit('close')">×</button>
      <h3>{{ isEditMode ? '编辑团体' : '新建团体' }}</h3>
      
      <form @submit.prevent="saveTeam">
        <div class="form-row">
          <input 
            v-model="teamData.name" 
            type="text" 
            placeholder="团体名称（如：AKB48）"
            required
            ref="nameInput"
          >
        </div>

        <h4>Live演出时间段</h4>
        <div class="time-slots">
          <div 
            v-for="(slot, index) in liveSlots" 
            :key="'live-' + index"
            class="time-slot-editor"
          >
            <div class="time-controls">
              <div class="slot-title">Live {{ index + 1 }}:</div>
              
              <div class="time-row">
                <span class="time-prefix">从</span>
                <select v-model="slot.startDay" class="day-select">
                  <option value="same">当日</option>
                  <option value="next">次日</option>
                </select>
                <input 
                  v-model="slot.startTime" 
                  type="time" 
                  class="time-input"
                >
              </div>
              
              <div class="time-row">
                <span class="time-prefix">到</span>
                <select v-model="slot.endDay" class="day-select">
                  <option value="same">当日</option>
                  <option value="next">次日</option>
                </select>
                <input 
                  v-model="slot.endTime" 
                  type="time" 
                  class="time-input"
                >
              </div>
              
              <button 
                type="button" 
                @click="removeLiveSlot(index)"
                class="remove-btn"
              >
                🗑️
              </button>
            </div>
            
            <div class="location-controls">
              <label class="location-label">
                <input 
                  v-model="slot.locationEnabled" 
                  type="checkbox"
                  @change="toggleLocationInput(slot)"
                >
                <span>指定地点</span>
              </label>
              <input 
                v-if="slot.locationEnabled"
                v-model="slot.location" 
                type="text" 
                placeholder="Live地点" 
                class="location-input"
              >
            </div>
          </div>
        </div>
        <button type="button" @click="addLiveSlot" class="add-slot-btn">
          + 添加Live时段
        </button>

        <h4>特典会时间段</h4>
        <div class="time-slots">
          <div 
            v-for="(slot, index) in tokutenSlots" 
            :key="'tokuten-' + index"
            class="time-slot-editor"
          >
            <div class="time-controls">
              <div class="slot-title">特典 {{ index + 1 }}:</div>
              
              <div class="time-row">
                <span class="time-prefix">从</span>
                <select v-model="slot.startDay" class="day-select">
                  <option value="same">当日</option>
                  <option value="next">次日</option>
                </select>
                <input 
                  v-model="slot.startTime" 
                  type="time" 
                  class="time-input"
                >
              </div>
              
              <div class="time-row">
                <span class="time-prefix">到</span>
                <select v-model="slot.endDay" class="day-select">
                  <option value="same">当日</option>
                  <option value="next">次日</option>
                </select>
                <input 
                  v-model="slot.endTime" 
                  type="time" 
                  class="time-input"
                >
              </div>
              
              <button 
                type="button" 
                @click="removeTokutenSlot(index)"
                class="remove-btn"
              >
                🗑️
              </button>
            </div>
            
            <div class="location-controls">
              <label class="location-label">
                <input 
                  v-model="slot.locationEnabled" 
                  type="checkbox"
                  @change="toggleLocationInput(slot)"
                >
                <span>指定地点</span>
              </label>
              <input 
                v-if="slot.locationEnabled"
                v-model="slot.location" 
                type="text" 
                placeholder="特典地点" 
                class="location-input"
              >
            </div>
          </div>
        </div>
        <button type="button" @click="addTokutenSlot" class="add-slot-btn">
          + 添加特典时段
        </button>

        <div class="modal-actions">
          <button type="submit" class="btn btn-primary">
            {{ isEditMode ? '保存' : '创建' }}
          </button>
          <button type="button" @click="$emit('close')" class="btn btn-secondary">
            取消
          </button>
        </div>
      </form>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, reactive, onMounted, nextTick } from 'vue'
import type { Team } from '@/types/planner'

interface ExtendedTimeSlot {
  startDay: 'same' | 'next'
  startTime: string
  endDay: 'same' | 'next'
  endTime: string
  locationEnabled: boolean
  location?: string
}

interface Props {
  activityId: string
  team?: Team | null
  isEditMode?: boolean
}

interface Emits {
  (e: 'save', team: Omit<Team, 'id'>): void
  (e: 'close'): void
}

const props = withDefaults(defineProps<Props>(), {
  team: null,
  isEditMode: false
})

const emit = defineEmits<Emits>()

// 响应式数据
const nameInput = ref<HTMLInputElement>()
const teamData = reactive({
  name: '',
  activityId: props.activityId
})

const liveSlots = reactive<ExtendedTimeSlot[]>([])
const tokutenSlots = reactive<ExtendedTimeSlot[]>([])

// 时间格式化函数
const formatTimeWithDay = (time: string, day: 'same' | 'next'): string => {
  if (day === 'next') {
    const [hours, minutes] = time.split(':').map(Number)
    const adjustedHours = hours + 24
    return `${adjustedHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`
  }
  return time
}

const parseFormattedTime = (formattedTime: string): { time: string; day: 'same' | 'next' } => {
  const [hours, minutes] = formattedTime.split(':').map(Number)
  if (hours >= 24) {
    return {
      time: `${(hours - 24).toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`,
      day: 'next'
    }
  }
  return {
    time: formattedTime,
    day: 'same'
  }
}

// 初始化数据
const initializeData = () => {
  if (props.isEditMode && props.team) {
    // 编辑模式：加载现有团体数据
    teamData.name = props.team.name
    teamData.activityId = props.team.activityId || props.activityId

    // 初始化Live时间段
    liveSlots.splice(0)
    props.team.liveSlots.forEach(slot => {
      const startParsed = parseFormattedTime(slot.start)
      const endParsed = parseFormattedTime(slot.end)
      
      liveSlots.push({
        startDay: startParsed.day,
        startTime: startParsed.time,
        endDay: endParsed.day,
        endTime: endParsed.time,
        locationEnabled: !!slot.location,
        location: slot.location
      })
    })

    // 初始化特典时间段
    tokutenSlots.splice(0)
    props.team.tokutenSlots.forEach(slot => {
      const startParsed = parseFormattedTime(slot.start)
      const endParsed = parseFormattedTime(slot.end)
      
      tokutenSlots.push({
        startDay: startParsed.day,
        startTime: startParsed.time,
        endDay: endParsed.day,
        endTime: endParsed.time,
        locationEnabled: !!slot.location,
        location: slot.location
      })
    })
  } else {
    // 新建模式：设置默认值
    teamData.name = ''
    teamData.activityId = props.activityId

    // 默认添加一个Live时间段
    liveSlots.splice(0)
    liveSlots.push({
      startDay: 'same',
      startTime: '14:00',
      endDay: 'same',
      endTime: '15:00',
      locationEnabled: false,
      location: undefined
    })

    // 默认添加一个特典时间段
    tokutenSlots.splice(0)
    tokutenSlots.push({
      startDay: 'same',
      startTime: '15:30',
      endDay: 'same',
      endTime: '17:00',
      locationEnabled: false,
      location: undefined
    })
  }
}

// 方法
const addLiveSlot = () => {
  liveSlots.push({
    startDay: 'same',
    startTime: '14:00',
    endDay: 'same',
    endTime: '15:00',
    locationEnabled: false,
    location: undefined
  })
}

const removeLiveSlot = (index: number) => {
  liveSlots.splice(index, 1)
}

const addTokutenSlot = () => {
  tokutenSlots.push({
    startDay: 'same',
    startTime: '15:30',
    endDay: 'same',
    endTime: '17:00',
    locationEnabled: false,
    location: undefined
  })
}

const removeTokutenSlot = (index: number) => {
  tokutenSlots.splice(index, 1)
}

const toggleLocationInput = (slot: ExtendedTimeSlot) => {
  if (!slot.locationEnabled) {
    slot.location = undefined
  }
}

const handleBackdropClick = () => {
  emit('close')
}

const saveTeam = () => {
  if (!teamData.name.trim()) {
    alert('请输入团体名称')
    return
  }

  const errors: string[] = []

  // 校验Live时间段
  liveSlots.forEach((slot, index) => {
    if (!slot.startTime || !slot.endTime) {
      errors.push(`Live ${index + 1}: 请填写完整的时间`)
      return
    }
    
    const startTime = formatTimeWithDay(slot.startTime, slot.startDay)
    const endTime = formatTimeWithDay(slot.endTime, slot.endDay)
    
    // 时间校验：开始时间不能晚于或等于结束时间
    if (parseInt(startTime.replace(':', '')) >= parseInt(endTime.replace(':', ''))) {
      errors.push(`Live ${index + 1}: 开始时间不能晚于或等于结束时间`)
    }
  })

  // 校验特典时间段
  tokutenSlots.forEach((slot, index) => {
    if (!slot.startTime || !slot.endTime) {
      errors.push(`特典 ${index + 1}: 请填写完整的时间`)
      return
    }
    
    const startTime = formatTimeWithDay(slot.startTime, slot.startDay)
    const endTime = formatTimeWithDay(slot.endTime, slot.endDay)
    
    // 时间校验：开始时间不能晚于或等于结束时间
    if (parseInt(startTime.replace(':', '')) >= parseInt(endTime.replace(':', ''))) {
      errors.push(`特典 ${index + 1}: 开始时间不能晚于或等于结束时间`)
    }
  })

  // 检查是否有验证错误
  if (errors.length > 0) {
    alert('请修正以下问题后再保存：\n\n' + errors.join('\n'))
    return
  }

  // 检查是否至少有一个时间段
  if (liveSlots.length === 0 && tokutenSlots.length === 0) {
    alert('请至少添加一个有效的时间段')
    return
  }

  // 转换扩展时间段数据为标准格式
  const processedLiveSlots = liveSlots.map(slot => ({
    start: formatTimeWithDay(slot.startTime, slot.startDay),
    end: formatTimeWithDay(slot.endTime, slot.endDay),
    location: slot.locationEnabled ? slot.location : undefined
  }))

  const processedTokutenSlots = tokutenSlots.map(slot => ({
    start: formatTimeWithDay(slot.startTime, slot.startDay),
    end: formatTimeWithDay(slot.endTime, slot.endDay),
    location: slot.locationEnabled ? slot.location : undefined
  }))

  const teamToSave: Omit<Team, 'id'> = {
    name: teamData.name.trim(),
    activityId: teamData.activityId,
    liveSlots: processedLiveSlots,
    tokutenSlots: processedTokutenSlots
  }

  emit('save', teamToSave)
}

// 生命周期
onMounted(() => {
  initializeData()
  
  nextTick(() => {
    nameInput.value?.focus()
  })
})
</script>

<style scoped>
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}

.modal-content {
  background: white;
  border-radius: 8px;
  padding: 20px;
  max-width: 500px;
  max-height: 75vh;
  overflow-y: auto;
  position: relative;
  width: 85vw;
}

.modal-close {
  position: absolute;
  top: 16px;
  right: 16px;
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #6c757d;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50%;
  transition: all 0.2s ease;
}

.modal-close:hover {
  background: #f8f9fa;
  color: #495057;
}

h3 {
  margin: 0 0 16px 0;
  color: #2d3748;
  font-size: 18px;
  font-weight: 600;
}

h4 {
  margin: 16px 0 8px 0;
  color: #374151;
  font-size: 14px;
  font-weight: 500;
}

.form-row {
  margin-bottom: 16px;
}

.form-row input {
  width: 100%;
  padding: 12px 16px;
  border: 2px solid #e2e8f0;
  border-radius: 8px;
  font-size: 14px;
  transition: all 0.2s ease;
  font-family: inherit;
}

.form-row input:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.time-slots {
  margin-bottom: 12px;
}

.time-slot-editor {
  padding: 12px 44px 12px 12px;
  background: #f8f9fa;
  border-radius: 6px;
  border: 1px solid #e9ecef;
  margin-bottom: 8px;
  position: relative;
}

.time-controls {
  display: flex;
  flex-direction: column;
  gap: 8px;
  margin-bottom: 8px;
  padding-right: 0;
}

.slot-title {
  font-weight: 600;
  font-size: 14px;
  color: #374151;
  margin-bottom: 4px;
}

.time-row {
  display: flex;
  align-items: center;
  gap: 8px;
}

.time-prefix {
  font-size: 13px;
  color: #6b7280;
  font-weight: 500;
  min-width: 20px;
}

.day-select,
.time-input {
  padding: 6px 8px;
  border-radius: 4px;
  border: 1px solid #d1d5db;
  font-size: 13px;
  font-family: monospace;
}

.day-select {
  min-width: 60px;
}

.time-input {
  min-width: 80px;
  font-family: monospace;
}

.remove-btn {
  position: absolute !important;
  top: 12px !important;
  right: 12px !important;
  background: #f8f9fa !important;
  border: 1px solid #e2e8f0 !important;
  border-radius: 50% !important;
  width: 32px !important;
  height: 32px !important;
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  font-size: 16px !important;
  padding: 0 !important;
  cursor: pointer !important;
  transition: all 0.2s ease !important;
  color: #6b7280 !important;
  z-index: 5 !important;
}

.remove-btn:hover {
  background: #fee2e2 !important;
  border-color: #f87171 !important;
  color: #ef4444 !important;
  transform: scale(1.05) !important;
  box-shadow: 0 2px 8px rgba(248, 113, 113, 0.3) !important;
}

.location-controls {
  display: flex;
  align-items: center;
  gap: 6px;
}

.location-label {
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 12px;
  color: #6c757d;
  cursor: pointer;
}

.location-input {
  flex: 1;
  padding: 6px 8px;
  border-radius: 4px;
  border: 1px solid #d1d5db;
  font-size: 13px;
}

.add-slot-btn {
  width: 100%;
  padding: 8px;
  background: #f3f4f6;
  border: 1px dashed #9ca3af;
  border-radius: 6px;
  color: #6b7280;
  cursor: pointer;
  transition: all 0.2s ease;
  font-size: 13px;
  margin-bottom: 12px;
}

.add-slot-btn:hover {
  background: #e9ecef;
  border-color: #adb5bd;
  color: #495057;
}

.modal-actions {
  display: flex;
  gap: 10px;
  margin-top: 20px;
  justify-content: flex-end;
  position: relative;
  z-index: 20;
}

.btn {
  padding: 8px 16px;
  border-radius: 6px;
  font-size: 13px;
  font-weight: 500;
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
}

.btn-primary {
  background: #667eea;
  color: white;
}

.btn-primary:hover {
  background: #5a6fd8;
}

.btn-secondary {
  background: #6b7280;
  color: white;
}

.btn-secondary:hover {
  background: #4b5563;
}

/* 响应式设计 */
@media (max-width: 768px) {
  .modal-content {
    width: 95vw;
    padding: 16px;
    max-height: 85vh;
    margin: 1rem 0;
  }
  
  .modal-overlay {
    align-items: flex-start;
    padding: 1rem 0;
    overflow-y: auto;
  }
  
  h3 {
    font-size: 18px;
    margin-bottom: 16px;
  }
  
  h4 {
    font-size: 14px;
    margin: 16px 0 8px 0;
  }
  
  .time-controls {
    flex-direction: column;
    align-items: flex-start;
    gap: 8px;
  }
  
  .time-row {
    display: flex;
    align-items: center;
    gap: 8px;
    width: 100%;
  }
  
  .time-prefix {
    min-width: 20px;
    font-size: 14px;
    flex-shrink: 0;
  }
  
  .slot-title {
    min-width: auto;
    width: 100%;
    font-size: 13px;
    text-align: left;
  }
  
  .day-select, .time-input {
    font-size: 14px;
    padding: 8px;
  }
  
  .location-controls {
    flex-direction: column;
    align-items: flex-start;
    gap: 6px;
  }
  
  .location-input {
    width: 100%;
    font-size: 14px;
  }
  
  .modal-actions {
    flex-direction: column;
    gap: 8px;
    margin-top: 16px;
    position: sticky;
    bottom: 0;
    background: white;
    padding: 16px 0 0 0;
    border-top: 1px solid #e2e8f0;
  }
  
  .btn {
    width: 100%;
    padding: 12px;
    font-size: 14px;
  }
  
  .time-slot-editor {
    padding: 12px 44px 12px 12px;
    margin-bottom: 8px;
  }
  
  .time-slots + .btn {
    padding: 8px 12px;
    font-size: 13px;
    margin-bottom: 12px;
  }
}
</style> 